"""
Creates the models/data tables
"""

# import models from django
from django.db import models
# import RegexValidator for validating user input
from django.core.validators import RegexValidator
# import pre_save for saving changes to student info
from django.db.models.signals import pre_save
# import receiver for saving changes to student info
from django.dispatch import receiver


class Student(models.Model):
    """Student model
    - creates a data table for tracking student information
    """

    # grade dropdown menu options
    GRADE = (
        ('9', '9'),
        ('10', '10'),
        ('11', '11'),
        ('12', '12'),
    )

    # category dropdown menu options
    CATEGORY = (
        ('N/A', 'N/A'),
        ('Bronze', 'Bronze'),
        ('Silver', 'Silver'),
        ('Gold', 'Gold'),
    )

    # fields:
    # name field
    name = models.CharField(max_length=50)
    # student number field (must be 10 characters and be unique)
    number = models.CharField(max_length=10, unique=True,
                              validators=[RegexValidator(regex='^.{10}$', message='Must be 10 characters')])
    # grade field (dropdown menu)
    grade = models.CharField(max_length=2, choices=GRADE)
    # hours field
    hours = models.IntegerField()
    # category field (dropdown menu) - uneditable and auto-generated
    category = models.CharField(max_length=10, choices=CATEGORY, default='N/A', editable=False)
    # date_created field - uneditable and auto-generated
    date_created = models.DateTimeField(auto_now_add=True, null=True, editable=False)

    # displays the name of the student after adding them to the database
    def __str__(self):
        return self.name

    def save(self):
        """Sets the categories for students
        - calculated based on student.hours
        - redefines the save functon for this class
        """
        # bronze category 50-199 hours
        if 50 <= self.hours < 200:
            self.category = 'Bronze'
        # silver category 200-500 hours
        elif 200 <= self.hours < 500:
            self.category = 'Silver'
        # gold category 500+ hours
        elif self.hours >= 500:
            self.category = 'Gold'
        # N/A <50 hours
        else:
            self.category = 'N/A'

        # saves the data using the original save function in this class (not the modified one above)
        super(Student, self).save()


class History(models.Model):
    """History model
    - keeps a record of the changes made to the students (specifically hours)
    - helps filter students by month for the monthly report
    """
    # fields (all are uneditable and autogenerated):
    # student number field
    number = models.CharField(max_length=10, editable=False)
    # hours field
    hours = models.IntegerField(editable=False)
    # date_modified field
    date_modified = models.DateTimeField(auto_now_add=True, null=True, editable=False)


@receiver(pre_save, sender=Student)
def my_handler(sender, instance, **kwargs):
    """Saves modified hours
    - also saves the student number to track which student the changes were made to
    :param sender: receive signals from Student model
    :param instance: modified data
    :param kwargs: wildcard keyword arguments
    :return: none
    """
    # saves student number
    new_number = instance.number
    # saves modified hours
    new_hours = instance.hours

    # saves the student number and modified hours to the history datatable
    history = History(number=new_number, hours=new_hours)
    history.save()
